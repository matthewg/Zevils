#!/usr/bin/perl

use strict;
use warnings;
no warnings 'once';
use POSIX;
use DBI;
use Sys::Syslog;
use LWP::UserAgent;
use XML::Parser;

our $db_connected = 0;
our %kidmap = (); # PID -> log_id

sub log_debug($);
sub activate_wake($);

sub load_settings {
	open(SETTINGS, "../etc/settings.inc") or die "Couldn't open settings: $!\n";
	my $settings = join("", <SETTINGS>);
	close SETTINGS;
	open(SETTINGS, "../etc/cisco-settings.inc") or die "Couldn't open Cisco settings: $!\n";
	$settings .= join("", <SETTINGS>);
	close SETTINGS;
	$settings =~ s/#__PHPONLY_START__.*?#__PHPONLY_END__//gs;
	eval $settings;
	die "Couldn't load settings: $@\n" if $@;

	die "Cisco support has been disabled\n" unless $Finnegan::Config::use_cisco;
	die "Please use the finnegan daemon instead of finnegan-cisco\n" if $Finnegan::Config::Cisco::wake_method eq "h323";
	die "Invalid wake_method -- should be tftp/unicast/multicast\n" unless $Finnegan::Config::Cisco::wake_method =~ /^(tftp|unicast|multicast)$/;
}
$SIG{HUP} = \&load_settings;

my $brancal_timestamp = 0;
load_settings;
log_debug("Finnegan starting");
openlog('finnegan', 'cons,pid', 'daemon');

# Daemonize
if(!$Finnegan::Config::testmode) {
	my $pid = fork;
	exit if $pid;
	die "Couldn't fork: $!" unless defined($pid);
	POSIX::setsid() or die "Can't start a new session: $!";
}

$SIG{CHLD} = sub { wait; };

our $dbh = DBI->connect(
	sprintf("DBI:mysql:database=%s;host=%s", $Finnegan::Config::db->{database}, $Finnegan::Config::db->{host}),
	$Finnegan::Config::db->{user}, $Finnegan::Config::db->{password}
);
die "Couldn't connect to database.\n" unless $dbh;
$db_connected = 1;

sub END { log_error("Finnegan going down!") if $db_connected; }
$SIG{INT} = $SIG{QUIT} = $SIG{ABRT} = $SIG{ALRM} = $SIG{TERM} = sub { exit 255; };



my $get_wakes_new = $dbh->prepare("SELECT * FROM wakes WHERE ISNULL(next_trigger_time)");
my $timeout_wakes = $dbh->prepare("UPDATE wakes SET next_trigger_time=NOW() + INTERVAL 9 MINUTE, this_trigger_time=NULL, this_timeout_count=this_timeout_count+1 WHERE this_trigger_time + INTERVAL $Finnegan::Config::Cisco::call_timeout SECOND <= NOW()");
my $get_wakes_bad = $dbh->prepare("SELECT * FROM wakes WHERE this_timeout_count >= $Finnegan::Config::Cisco::max_wake_timeouts OR this_unreachable_count >= $Finnegan::Config::Cisco::max_unreachable_count");
my $get_wakes_ready = $dbh->prepare("SELECT *, UNIX_TIMESTAMP(next_trigger_time) AS 'unix_trigger' FROM wakes WHERE next_trigger_time <= NOW() AND ISNULL(this_trigger_time) ORDER BY next_trigger_time");
my $get_wakes_repost = $dbh->prepare("SELECT wake_id, extension, this_post_count, UNIX_TIMESTAMP(this_trigger_time) AS 'unix_trigger' FROM wakes WHERE NOT ISNULL(this_trigger_time)");

my $initialize_wake = $dbh->prepare("UPDATE wakes SET next_trigger_time=?, this_trigger_time=NULL, this_timeout_count=0, this_unreachable_count=0, this_post_count=0 WHERE wake_id=?");
my $activate_wake = $dbh->prepare("UPDATE wakes SET this_trigger_time=NOW(), this_post_count=0 WHERE wake_id=?");
my $repost_wake = $dbh->prepare("UPDATE wakes SET this_post_count=this_post_count+1 WHERE wake_id=?");
my $unreachable_wake = $dbh->prepare("UPDATE wakes SET next_trigger_time=NOW() + INTERVAL 9 MINUTE, this_trigger_time=NULL, this_unreachable_count=this_unreachable_count+1 WHERE wake_id=?");
my $delete_wake = $dbh->prepare("DELETE FROM wakes WHERE wake_id=?");
my $snooze_wake = $dbh->prepare("UPDATE wakes SET next_trigger_time=NOW() + INTERVAL 9 MINUTE, this_trigger_time=NULL WHERE wake_id=?");

my $log_error = $dbh->prepare("INSERT INTO log_daemon (time, data) VALUES (NOW(), ?)");
my $log_wake_start = $dbh->prepare("INSERT INTO log_wake (wake_id, extension, event, start_time) VALUES (?, ?, 'activate', NOW())");
my $log_wake_end = $dbh->prepare("UPDATE log_wake SET end_time=NOW(), result=?, data=? WHERE log_id=?");
my $get_insertid = $dbh->prepare("SELECT LAST_INSERT_ID()");

package LWP::UserAgent::Finnegan;
our @ISA = qw(LWP::UserAgent);
sub get_basic_credentials { return ($Finnegan::Config::Cisco::post_username, $Finnegan::Config::Cisco::post_password); }
package main;

my $http_agent = LWP::UserAgent::Finnegan->new;
$http_agent->timeout($Finnegan::Config::Cisco::post_timeout);
$http_agent->agent("finnegan-cisco/0.1 " . $http_agent->_agent);

my $xml_parser = XML::Parser->new(Style => "Tree");

my %daymap = ("Sun" => 1, "Mon" => 2, "Tue" => 3, "Wed" => 4, "Thu" => 5, "Fri" => 6, "Sat" => 7);
my @daymap_inv = ("", sort { $daymap{$a} <=> $daymap{$b} } keys %daymap);

sub initialize_wake($;$) {
	my $row = shift;
	my $waketime = shift;
	return unless $row;

	if(!$waketime) {
		if($row->{date}) {
			$waketime = $row->{date} . " " . $row->{time};
		} else {
			$row->{time} =~ /(\d+):(\d+)/;
			my @currtime = localtime(time());
			my @waketime = (0, $2, $1);
			@waketime[3, 4, 5] = @currtime[3, 4, 5];

			my $currsecs = $currtime[2]*60+$currtime[1];
			my $wakesecs = $waketime[2]*60+$waketime[1];

			@waketime = localtime(mktime(@waketime) + 60*60*24) if $currsecs > $wakesecs; # Not today - tomorrow

			$waketime = strftime("%Y-%m-%d %H:%M:%S", @waketime);
		}
	}
	log_debug("Setting trigger_time on " . $row->{wake_id} . " to $waketime");

	if(!$initialize_wake->execute($waketime, $row->{wake_id})) {
		db_error("Couldn't update next_trigger_time", $initialize_wake);
	}
}

sub finished_wake($) {
	my $row = shift;
	if($row->{date}) {
		$delete_wake->execute($row->{wake_id});
	} else {
		initialize_wake($row);
	}
}

sub post_to_phone($@) {
	my($extension, @uri) = @_;

	if($Finnegan::Config::nocalls) {
		log_debug("Posting to $extension: " . join(", ", @uri));
		return "";
	}

	my $ip = "127.0.0.1";

	my $xml = "<CiscoIPPhoneExecute>\n";
	$xml .= "<ExecuteItem URL=\"$_\"/>\n" foreach @uri;
	$xml .= "</CiscoIPPhoneExecute>\n";
	my $response = $http_agent->post("http://$ip/CGI/Execute", {XML => $xml});
	if($response->is_success) {
		my $parsetree;
		eval { $parsetree = $xml_parser->parse($response->content); };
		return $@ if $@;

		my $error = "";

		my $response_items = $parsetree;
		shift @$response_items;
		while(@$response_items) {
			my($tag, $value) = splice(@$response_items, 0, 2);
			next unless $tag eq "ResponseItem";
			my $attrs = $value->[0];
			$error .= printf("%s: %d/%s. ", $attrs->{URL}, $attrs->{Status}, $attrs->{Data}) if $attrs->{Status} != 0;
		}

		return $error;
	} else {
		return $response->status_line;
	}
}


sub log_wake_start($$) {
	my($wake_id, $extension) = @_;
	if($Finnegan::Config::testmode) {
		warn "$$: Starting wake $wake_id for extension $extension\n";
	}
	$log_wake_start->execute($wake_id, $extension);
	my ($log_wake_id) = @{$dbh->selectcol_arrayref($get_insertid)};
	$log_wake_start->finish;
	return $log_wake_id;
}
sub log_wake_end($$$) {
	my($result, $data, $log_id) = @_;
	if($Finnegan::Config::testmode) {
		warn "$$: Ending wake, log $log_id\n";
	}
	$log_wake_end->execute($result, $data, $log_id);
	$log_wake_end->finish;
}
sub log_debug($) {
	my $str = shift;
	if($Finnegan::Config::testmode) {
		warn "$$ - " . time() . ": $str\n";
	}
}
sub log_error($) {
	my $errstr = shift;
       	syslog('err', $errstr);
	$log_error->execute($errstr);
	if($Finnegan::Config::testmode) {
		warn "$$ - " . time() . ": $errstr\n";
	}
}
sub db_error($$) {
	my $str = shift;
	my $sth = shift;
	my $errstr = "Database error: $str - " . $sth->errstr;
	log_error($errstr);
}

# 1. Reload Brandeis calendar data, if necessary.
# 2. Initialize wakes. [get_wakes_new, initialize_wake]
# 3. Time out any wakes which need to be timed out. [timeout_wakes]
# 4. Get all wakes which have exceeded timeout/unreachable parameters. [get_wakes_bad]
# 5. Activate anything that needs it. [get_wakes_ready, activate_wake]
# 6. Send POST to any phones which need to be told to start playing the sound file again. [get_wakes_repost, repost_wake]
# 7. Reap the TFTP directory
# 8. Sleep 5 seconds
while(1) {
	log_debug("Checking brancal time");
	my $bctime = (stat "../etc/brancal.inc")[9];
	if($bctime > $brancal_timestamp) {
		log_debug("Loading brancal");
		$brancal_timestamp = $bctime;
		my $ret = do "../etc/brancal.inc";
		if(!$ret) {
			my $reason = "";
			$reason = "Couldn't parse brancal.inc: $@" if $@;
			$reason = "Couldn't load brancal.inc: $!" unless defined($ret);
			$reason = "Couldn't run brancal.inc" unless $ret;
			log_error($reason);
		}

		# Make sure it gets included again next time
		delete $INC{"../etc/brancal.inc"};
		delete $INC{"brancal.inc"};
	}


	log_debug("Initializing wakes");
	my $newwakes = $get_wakes_new->execute();
	if(!$newwakes) {
		db_error("Couldn't get new wakes", $get_wakes_new);
	} else {
		while(my $row = $get_wakes_new->fetchrow_hashref) {
			initialize_wake($row);
		}
		$get_wakes_new->finish;
	}

	log_debug("Timing out wakes");
	$timeout_wakes->execute();

	log_debug("Getting bad wakes");
	my $bad_wakes = $get_wakes_bad->execute();
	if($bad_wakes) {
		while(my $row = $get_wakes_bad->fetchrow_hashref) {
			finished_wake($row);
		}
		$get_wakes_bad->finish;
	}

	log_debug("Getting ready wakes");
	my $wakes = $get_wakes_ready->execute();
	if(!$wakes) {
		db_error("Couldn't get wakes", $get_wakes_ready);
		next;
	}

	while(my $row = $get_wakes_ready->fetchrow_hashref) {
		log_debug("Got wake " . $row->{wake_id});

		# If it's a non-snoozed recurring wait, we have to make sure that it should get tapped today
		if(!$row->{date} and !$row->{snooze_count}) {
			my $go_today = 1;

			my($weekday, $hour, $date) = split(/:/, strftime("%w:%H:%Y-%m-%d", localtime(time())));
			my $yesterday_date = strftime("%Y-%m-%d", localtime(time() - 60*60*24));
			my @today = split(/-/, strftime("%d-%m-%Y", localtime(time())));
			my @tomorrow = split(/-/, strftime("%d-%m-%Y", localtime(time() + 60*60*24)));
			$weekday++; # Make Sunday 1, not 0
			my $yesterday = ($weekday - 1) % 8;

			if($row->{cal_type} eq "Brandeis") {
				$weekday = $Finnegan::Calendar::BRANDEIS_DAYS->{$date} if $Finnegan::Calendar::BRANDEIS_DAYS->{$date};
				$yesterday = $Finnegan::Calendar::BRANDEIS_DAYS->{$yesterday_date} if $Finnegan::Calendar::BRANDEIS_DAYS->{$yesterday_date};
			}

			my %wake_days = map { $daymap{$_} => 1 } split(/,/, $row->{weekdays});
			$row->{time} =~ /^(\d+):/;
			my $wake_hour = $1;

			# Should the wake be activated on this day of the week?
			# Or, if wake is for 11PM, and it's midnight, also check yesterday.
			log_debug("wake_days={".join(",", keys %wake_days)."}, weekday=$weekday");
			if($wake_days{$weekday}) {
				# Everything's groovy
				log_debug("Okay");
			} elsif($wake_hour == 23 and $hour == 0 and $wake_days{$yesterday}) {
				log_debug("Okay yesterday");
				$weekday = $yesterday;
				$date = $yesterday_date;
				@tomorrow = @today;
			} else {
				log_debug("Not today");
				$go_today = 0;
			}

			$go_today = 0 if $row->{cal_type} eq "Brandeis" and $Finnegan::Calendar::NO_CLASSES->{$date};
			$go_today = 0 if $row->{cal_type} eq "holidays" and $Finnegan::Calendar::HOLIDAYS->{$date};
			log_debug("After date check (date=$date), status: $go_today");

			if(!$go_today) {
				$row->{time} =~ /(\d+):(\d+)/;
				
				$tomorrow[1]--;
				$tomorrow[2] -= 1900;
				initialize_wake($row, strftime("%Y-%m-%d %H:%M:%S", 0, $2, $1, @tomorrow));

				next;
			}
		}

		if(!$activate_wake->execute($row->{wake_id})) {
			db_error("Couldn't update trigger_date", $activate_wake);
		}

		# Yay, make a call
		activate_wake($row);
	}
	$get_wakes_ready->finish;


	log_debug("Reposting wakes");
	my $repost_wakes = $get_wakes_repost->execute();
	if(!$repost_wakes) {
		db_error("Couldn't get wakes", $get_wakes_repost);
		next;
	}

	my $time = time();
	while(my $row = $get_wakes_repost->fetchrow_hashref) {
		my $wakefile = $Finnegan::Config::Cisco::tftp_dir . "/fin-".$row->{wake_id}.".ul";
		my $wakesize = (stat($wakefile))[7];
		if(!$wakesize) {
			log_error("Couldn't stat $wakefile: $!");
			next;
		}

		my $wakelength = $wakesize/8000;
		print "Comparing " . ($row->{unix_trigger} + $wakelength*($row->{this_post_count}+1)) . " <= $time\n";
		next unless $row->{unix_trigger} + $wakelength*($row->{this_post_count}+1) <= $time;

		if(!$repost_wake->execute($row->{wake_id})) {
			db_error("Couldn't repost wake", $repost_wake);
			next;
		}

		log_debug("Reposting wake " . $row->{wake_id});
		my $error = post_to_phone($row->{extension}, "Play:${Finnegan::Config::Cisco::tftp_prefix}fin-".$row->{wake_id}.".ul");
		log_error($error) if $error;
	}
	$get_wakes_repost->finish;


	log_debug("Reaping TFTP directory");
	if(!opendir(TFTP, $Finnegan::Config::Cisco::tftp_dir)) {
		log_error("Couldn't open TFTP directory: $!");
	} else {
		while(my $file = readdir(TFTP)) {
			next unless $file =~ /^fin-\d+\.ul$/;
			my $mtime = (stat($Finnegan::Config::Cisco::tftp_dir . "/$file"))[9];
			if($mtime + $Finnegan::Config::Cisco::call_timeout + 300 < $time) {
				log_debug("Unlinking TFTP file $file");
				unlink $Finnegan::Config::Cisco::tftp_dir."/$file" || log_error("Couldn't unlink TFTP file $file: $!");
			}
		}
		closedir(TFTP);
	}



	log_debug("Waiting...");
	sleep 5;
}

sub activate_wake($) {
	my($row) = @_;
	log_debug("Doing wake for x".$row->{extension});

	my $log_id = log_wake_start($row->{wake_id}, $row->{extension});

	my $pid = fork();
	if(!defined($pid)) {
		log_error("Couldn't fork: $!");
		log_wake_end("failure", "Couldn't fork: $!", $log_id);
		$snooze_wake->execute($row->{wake_id}) || db_error("Couldn't snooze wake " . $row->{wake_id}, $snooze_wake);
		return 1;
	} elsif($pid) {
		return 0;
	} else {
		$db_connected = 0; # Don't log "Finnegan going down!" when we exit.
		my $dbh2 = $dbh->clone; # We can't use parent's DB connection, parent still needs it
		$dbh->{InactiveDestroy} = 1; # Don't kill parent's statement handles on exit

		$log_wake_end = $dbh2->prepare("UPDATE log_wake SET end_time=NOW(), result=?, data=? WHERE log_id=?");
		$log_error = $dbh2->prepare("INSERT INTO log_daemon (time, data) VALUES (NOW(), ?)");
		$unreachable_wake = $dbh2->prepare("UPDATE wakes SET next_trigger_time=NOW() + INTERVAL 9 MINUTE, this_trigger_time=NULL, this_unreachable_count=this_unreachable_count+1 WHERE wake_id=?");
		$snooze_wake = $dbh2->prepare("UPDATE wakes SET next_trigger_time=NOW() + INTERVAL 9 MINUTE, this_trigger_time=NULL WHERE wake_id=?");

		my $message;
		if($row->{message} == -1) { # Random message
			my @messages = map { $_->{id} } @$Finnegan::Config::messages;
			$message = $messages[int(rand(@messages))];
		} else {
			$message = $row->{message};
		}

		make_samples($message) if($Finnegan::Config::Cisco::wake_method eq "tftp");
			

		if($Finnegan::Config::nocalls) {
			log_debug("All done.");
		} else {
			my $uri;
			if($Finnegan::Config::Cisco::wake_method eq "tftp") {
				$uri = "Play:${Finnegan::Config::Cisco::tftp_prefix}fin-".$row->{wake_id}.".ul";
			} elsif($Finnegan::Config::Cisco::wake_method eq "unicast") {
				$uri = "RTPRx:".$Finnegan::Config::Cisco::rtp_ip.":".$Finnegan::Config::Cisco::rtp_port_base;
			} else {
				$uri = "RTPMRx:".$Finnegan::Config::Cisco::rtp_ip.":".($Finnegan::Config::Cisco::rtp_port_base+2*$message);
			}

			my $error = post_to_phone($row->{extension},
				"Play:${Finnegan::Config::Cisco::tftp_prefix}fin-".$row->{wake_id}.".ul",
				$Finnegan::Config::Cisco::url_base . "/wake/dowake.php?id=" . $row->{wake_id} . "&amp;date=". ($row->{date} ? "1" : "0")
			);

			if($error) {
				log_wake_end("failure", "Unreachable: $error", $log_id);
				$unreachable_wake->execute($row->{wake_id});
			}

			if($Finnegan::Config::Cisco::wake_method eq "unicast") {
				my $pid = fork();
				log_wake_end("failure", "Couldn't fork: $!", $log_id) unless defined($pid);
				if($pid == 0) {
					exec("./finnegan-cisco-rtp", "-u", "-m", $message, "-d", "127.0.0.1:".$Finnegan::Config::Cisco::rtp_port_base)
						or die "Couldn't exec finnegan-cisco-rtp: $!\n";
				}
			}
		}

		exit 0;
	}
}


sub make_samples($) {
	my $message = shift;

	my($hour, $minute, $ampm) = split(/:/, strftime("%I:%M:%p", localtime(time())));
	$hour =~ s/^0//;
	$minute =~ s/^0//;
	$ampm = lc($ampm);

	my @samples = (
		"../g711-mulaw/messages/$message.ul",
		"../g711-mulaw/wake/timeis.ul",
		"../g711-mulaw/wake/hours/$hour.ul"
	);

	if($minute > 0) {
		if($minute > 0 and $minute < 20) {
			push @samples, "../g711-mulaw/wake/ten-minutes/0.ul" if $minute < 10;
			push @samples, "../g711-mulaw/wake/one-minutes/$minute.ul";
		} else {
			$minute =~ /(.)(.)/;
			push @samples, "../g711-mulaw/wake/ten-minutes/".($1*10).".ul";
			push @samples, "../g711-mulaw/wake/one-minutes/$2.ul" if $2;
		}
	}

	push @samples, "../g711-mulaw/wake/$ampm.ul";

	push @samples, "../g711-mulaw/wake/edit.ul";

	if(!open(OUTSAMPLE, ">", $Finnegan::Config::Cisco::tftp_dir . "/fin-" . $row->{wake_id} . ".ul")) {
		log_wake_end("failure", "Couldn't open output sample fin-".$row->{wake_id}.".ul: $!", $log_id);
		$snooze_wake->execute($row->{wake_id}) || db_error("Couldn't snooze wake " . $row->{wake_id}, $snooze_wake);
		exit 1;
	}

	local $/ = undef;

	log_debug("Reading samples...");
	foreach(@samples) {
		log_debug("Reading sample $_");
		if(!open(SAMPLE, $_)) {
			log_wake_end("failure", "Couldn't open input sample $_: $!", $log_id);
			$snooze_wake->execute($row->{wake_id}) || db_error("Couldn't snooze wake " . $row->{wake_id}, $snooze_wake);
			exit 1;
		}
		print OUTSAMPLE <SAMPLE>;
		close SAMPLE;
	}

	close OUTSAMPLE;
	log_debug("Done with samples.");
}
