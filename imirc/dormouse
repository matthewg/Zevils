#!/usr/bin/perl

use warnings;
use strict;
use Toc qw(:all);
use IO::Socket;
use IO::Select;
use Fcntl;
use Fcntl qw(:flock);
use POSIX;
use Net::OSCAR 0.05 qw(:standard);
use vars qw($oscarprime %tocs $dir %chats);

$Toc::SERVER = 1;

my($sock, $pid, $screenname);

my $log = shift;
if($log) {
	close STDOUT;
	close STDERR;
	open(STDOUT, ">$log");
	open(STDERR, ">&STDOUT");
}

$pid = fork;
exit unless $pid == 0;
POSIX::setsid();

$sock = IO::Socket::INET->new(LocalPort => 5000, Listen => 5) or die "Couldn't sock: $@\n";

$dir = (getpwent())[7];

if(not -f "$dir/.chatseq") {
	open(CHATSEQ, ">$dir/.chatseq");
	print CHATSEQ "1000\n";
	close CHATSEQ;
}

sub touch($) {
	my $file = shift;
	return if -f $file;
	open(FILE, ">$file");
	close FILE;
}

sub chatseq() {
	while(-f "$dir/,chatseq.lock") { select(undef, undef, undef, 0.01); }
	touch("$dir/.chatseq.lock");
	my $chatseq = 0;

	if(open(CHATSEQ, "$dir/.chatseq")) {
		$chatseq = <CHATSEQ>;
		close CHATSEQ;
	}
	$chatseq ||= 0;

	$chatseq++;
	open(CHATSEQ, ">$dir/.chatseq");
	print CHATSEQ $chatseq;
	close CHATSEQ;

	unlink("$dir/.chatseq.lock");
	return $chatseq;
}


sub END { $sock->close if $sock; }

sub unroast_password($) {
	my($pass, $roast, $rp) = shift;

	$roast = "Tic/Toc";
	my $pos = 0;
	$rp = "";

	substr($pass, 0, 2) = "";
	for(my $x = 0; ($x < 150) && $pass; $x++) {
		my $byte = hex(substr($pass, 0, 2, ""));
		$rp .= chr($byte ^ ord(substr($roast, $x % length($roast), 1)));
	}

	return $rp;
}

$oscarprime = Net::OSCAR->new();
$oscarprime->set_callback_error(\&error);
$oscarprime->set_callback_buddy_in(\&buddy_in);
$oscarprime->set_callback_buddy_out(\&buddy_out);
$oscarprime->set_callback_im_in(\&im_in);
$oscarprime->set_callback_chat_joined(\&chat_joined);
$oscarprime->set_callback_chat_buddy_in(\&chat_buddy_in);
$oscarprime->set_callback_chat_buddy_out(\&chat_buddy_out);
$oscarprime->set_callback_chat_im_in(\&chat_im_in);
$oscarprime->set_callback_chat_invite(\&oscar_chat_invite);
$oscarprime->set_callback_buddy_info(\&buddy_info);
$oscarprime->set_callback_evil(\&oscar_evil);
$oscarprime->set_callback_chat_closed(\&chat_closed);
$oscarprime->set_callback_admin_error(\&admin_error);
$oscarprime->set_callback_admin_ok(\&admin_ok);
$oscarprime->set_callback_rate_alert(\&rate_alert);
$oscarprime->set_callback_signon_done(\&signon_done);
$oscarprime->debug(255);

# Be aware of "quoted parameters", unescaping, etc.
sub toc_split($) {
	my @params = ();
	my $param = "";
	my $input = shift;
	my $inquote = 0;

	while($input) {
		my $char = substr($input, 0, 1, "");
		if($char eq "\\") {
			$param .= substr($input, 0, 1, "");
		} elsif($char eq " " and not $inquote) {
			$input =~ s/^\s*//;
			push @params, $param;
			$param = "";
		} elsif(not $inquote and ($char eq "\"" or $char eq "(" or $char eq "{" or $char eq "[")) {
			$inquote = 1;
		} elsif($inquote and ($char eq "\"" or $char eq ")" or $char eq "}" or $char eq "]")) {
			$inquote = 0;
		} else {
			$param .= $char;
		}
	}
	push @params, $param;
	return @params;
}

while(my $toc = $sock->accept) {
	my($line, $message, $command, @params, $person, $flags, $screenname, $oscar);

	$pid = fork();
	die "Couldn't fork: $!" unless defined $pid;
	if($pid == 0) {
		$toc->close;
		next;
	}

	${*$toc}{'net_toc_username'} = 'temp';

	$toc->read($line, 10);
	print STDERR "Got $line\n";
	die unless $line eq "FLAPON\r\n\r\n";

	$flags = 0;
	fcntl($toc, F_GETFL, $flags);
	$flags |= O_NONBLOCK;
	fcntl($toc, F_SETFL, $flags);

	sflap_put($toc, sflap_encode(pack("N", 1), 1));
	$message = sflap_get($toc, 1);
	(undef, undef, undef, $screenname) = unpack("Nnna*", $message); #signon packet
	$Toc::config{$screenname}{paused} = 0;
	${*$toc}{'net_toc_username'} = $screenname;
	

	$message = sflap_get($toc, 1);
	if($message !~ /TOC2/) {
		sflap_do($toc, "ERROR:989:Your client is too old.  You must use a client which supports the TOC2 protocol.");
		$toc->close();
		exit 1;
	}
        # $msg = quote("toc_signon login.oscar.aol.com 5190 $username  " . roast_password($password) . " english ") . "\"QuickBuddy\"";
	@params = toc_split($message);
	my $password = unroast_password($params[4]);

	$oscar = $oscarprime->clone();
	$tocs{normalize($screenname)} = $toc;
	$oscar->signon($screenname, $password);

	while(1) {
		if(!$toc->fileno) {
			$oscar->signoff;
			last;
		}
		my $rin = '';
		vec($rin, $toc->fileno, 1) = 1;
		foreach my $connection($oscar->connections) {
			vec($rin, fileno $connection, 1) = 1;
		}
		my $win = $rin;
		my $ein = $rin;
		next unless select($rin, $win, $ein, 0.01);
		$oscar->process_connections(\$rin, \$win, \$ein);
		next unless vec($rin, $toc->fileno, 1);
		$message = sflap_get($toc, 1);
		if(!$message) {
			$oscar->signoff;
			last;
		}
		($command, @params) = toc_split($message);
		next unless $command;
		process_toc_command($toc, $oscar, $command, @params);
	}

	0;
}

sub process_toc_command {
	my($toc, $oscar, $command, @params) = @_;

	if($command eq "toc_signon") {
		die "Got toc_signon too late!\n";
	} elsif($command eq "toc_init_done") {
		# ignore
	} elsif($command eq "toc_send_im") {
		my $away = 0;
		if($params[-1] eq "away") {
			pop @params;
			$away = 1;
		}
		print STDERR "Sending $params[1] to $params[0].\n";
		$oscar->send_im($params[0], $params[1], $away);
	} elsif($command eq "toc_add_buddy") {
		$oscar->add_buddy(shift @params, @params);
	} elsif($command eq "toc_remove_buddy") {
		$oscar->remove_buddy(shift @params, @params);
	} elsif($command eq "toc_set_config") {
		#Ignore
	} elsif($command eq "toc_evil") {
		my $anon = ($params[1] eq "norm") ? 0 : 1;
		$oscar->evil($params[0], $anon);
	} elsif($command eq "toc_add_permit") {
		$oscar->add_permit(@params);
	} elsif($command eq "toc_add_deny") {
		$oscar->add_deny(@params);
	} elsif($command eq "toc_set_permit_mode") {
		$oscar->set_visibility($params[0]);
	} elsif($command eq "toc_chat_join") {
		$oscar->chat_join($params[1], $params[0]);
	} elsif($command eq "toc_chat_send") {
		$chats{$params[0]}->chat_send($params[1]);
	} elsif($command eq "toc_chat_whisper") {
		$oscar->send_im($params[1], $params[2]);
	} elsif($command eq "toc_chat_evil") {
		my $anon = ($params[2] eq "norm") ? 0 : 1;
		$oscar->evil($params[1], $anon);
	} elsif($command eq "toc_chat_invite") {
		my $chat = shift @params;
		my $message = shift @params;
		foreach my $buddy(@params) {
			$chats{$chat}->invite($buddy, $message);
		}
	} elsif($command eq "toc_chat_leave") {
		$chats{$params[0]}->part;
		delete $chats{$params[0]};
	} elsif($command eq "toc_chat_accept") {
		print STDERR "Accepting invite for $chats{$params[0]} ($params[0])\n";
		$oscar->chat_accept($chats{$params[0]});
	} elsif($command eq "toc_get_info") {
		$oscar->get_info($params[0]);
	} elsif($command eq "toc_get_away") {
		$oscar->get_away($params[0]);
	} elsif($command eq "toc_set_info") {
		$oscar->set_profile($params[0]);
	} elsif($command eq "toc_set_away") {
		$params[0] ||= "";
		$oscar->set_away($params[0]);
	} elsif($command eq "toc_set_dir") {
		#Unimplemented
	} elsif($command eq "toc_get_dir") {
		#Unimplemented
	} elsif($command eq "toc_dir_search") {
		#Unimplemented
	} elsif($command eq "toc_set_idle") {
		$oscar->set_idle($params[0]);
	} elsif($command eq "toc_set_caps") {
		#Unimplemented
	} elsif($command eq "toc_rvous_propose") {
		#Unimplemented
	} elsif($command eq "toc_rvous_accept") {
		#Unimplemented
	} elsif($command eq "toc_rvous_cancel") {
		#Unimplemented
	} elsif($command eq "toc_format_nickname") {
		$oscar->format_screenname($params[0]);
	} elsif($command eq "toc_change_passwd") {
		$oscar->change_password($params[0], $params[1]);
	} elsif($command eq "toc_change_email") {
		$oscar->change_email($params[0]);
	} elsif($command eq "toc_confirm_account") {
		$oscar->confirm_account($params[0]);
	}
}

sub Toc::debug_print($$$) {
	my($text, $type, $level) = @_;
	print STDERR "($level, $type) $text";
}

sub buddy_info_string($) {
	my $buddat = shift;
	my $string = "";

	$buddat->{idle} ||= 0;
	$string .= join(":", int($buddat->{evil}), $buddat->{onsince}, $buddat->{idle});
	$string .= ":";
	$string .= $buddat->{aol} ? "A" : " ";
	if($buddat->{admin}) {
		$string .= "A";
	} elsif($buddat->{trial}) {
		$string .= "U";
	} elsif($buddat->{free}) {
		$string .= "O";
	} else {
		$string .= " ";
	}

	$string .= "U" if $buddat->{away};
	return $string;
}


sub error($$$$$$$$;$) {
	my($oscar, $connection, $error, $errno, $url, $reqdata, $family, $subtype, $fatal) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};
	$error = "($reqdata) $error" if $reqdata;
	sflap_do($toc, "ERROR:$error");
	if($fatal) {
		$oscar->close;
		
	}
}

sub signon_done($) {
	my $oscar = shift;
	my $toc = $tocs{normalize($oscar->screenname)};

	sflap_do($toc, "SIGN_ON:TOC2.0");
	sflap_do($toc, "NICK:".$oscar->screenname);
	sflap_do($toc, "EMAIL:".$oscar->email);

	my $config = "m " . $oscar->visibility . "\n";
	
	foreach my $group($oscar->groups) {
		next if $group eq "permit" or $group eq "deny";
		$config .= "g $group\n";
		foreach my $buddy($oscar->buddies($group)) {
			$config .= "b $buddy\n";
		}
	}
	foreach my $permit($oscar->buddies("permit")) {
		$config .= "p $permit\n";
	}
	foreach my $deny($oscar->buddies("deny")) {
		$config .= "d $deny\n";
	}

	sflap_do($toc, "CONFIG:$config");
}

sub rate_alert($$$) {
	my($oscar, $level, $clear, $window) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	$clear /= 1000;
	sflap_do($toc, "ERROR:903") if $level >= RATE_LIMIT;
}

sub admin_error($$$$) {
	my($oscar, $reqtype, $error, $errurl) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	my $errno = 900;
	if($error == ADMIN_ERROR_CONNREF) {
		$errno = 914;
	} else {
		$errno = 911;
	}

	sflap_do($toc, "ERROR:$errno:$errurl");
}

sub admin_ok($$) {
	my($oscar, $reqtype) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	#password change, email change, screenname format
	if($reqtype == ADMIN_TYPE_PASSWORD_CHANGE) {
		$reqtype = "ADMIN_PASSWD_STATUS";
	} elsif($reqtype == ADMIN_TYPE_SCREENNAME_FORMAT) {
		$reqtype = "ADMIN_NICK_STATUS";
	} elsif($reqtype == ADMIN_TYPE_EMAIL_CHANGE) {
		$reqtype = "ADMIN_EMAIL_STATUS";
	} elsif($reqtype == ADMIN_TYPE_ACCOUNT_CONFIRM) {
		$reqtype = "ADMIN_CONFIRM_STATUS";
	}

	sflap_do($toc, "$reqtype:0:");
}

sub chat_closed($$$) {
	my($oscar, $chat, $error) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	sflap_do($toc, "CHAT_LEFT:".$chat->{dormouse_id});
}

sub buddy_in($$$$) {
	my $oscar = shift;
	my $toc = $tocs{normalize($oscar->screenname)};
	my($screenname, $group, $buddat) = @_;
	my $string = "UPDATE_BUDDY:$screenname:T:";

	$string .= buddy_info_string($buddat);

	sflap_do($toc, $string);
}

sub chat_buddy_in($$$$) {
	my $oscar = shift;
	my($screenname, $chat, $buddat) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	$chat->{dormouse_id} = $chats{$chat->url};
	print "Got chat ".$chat->{dormouse_id}." for ".$chat->url."\n";
	sflap_do($toc, join(":", "CHAT_UPDATE_BUDDY", $chat->{dormouse_id}, "T", $screenname));
}

sub buddy_out($$$) {
	my $oscar = shift;
	my($screenname, $group) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	sflap_do($toc, "UPDATE_BUDDY:$screenname:F:0:0:0:  ");
}

sub chat_buddy_out($$$) {
	my $oscar = shift;
	my($screenname, $chat) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	sflap_do($toc, join(":", "CHAT_UPDATE_BUDDY", $chat->{dormouse_id}, "F", $screenname));
}

sub im_in($$$) {
	my $oscar = shift;
	my($who, $what, $away) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};
	my $string = "IM_IN:$who:";

	$string .= $away ? "T" : "F";
	$string .= ":$what";
	sflap_do($toc, $string);
}

sub chat_im_in($$$$) {
	my $oscar = shift;
	my($who, $chat, $what) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	sflap_do($toc, "CHAT_IN:".$chat->{dormouse_id}.":$who:F:$what");
}

sub oscar_chat_invite($$$$$) {
	my $oscar = shift;
	my($from, $msg, $chat, $chaturl) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	my $chatseq = chatseq();
	$chats{$chaturl} = $chatseq;
	$chats{$chatseq} = $chaturl;
	print STDERR "Invited to $chaturl ($chatseq)\n";
	sflap_do($toc, "CHAT_INVITE:$chat:$chatseq:$from:$msg");
}

sub chat_joined($$$) {
	my $oscar = shift;
	my($name, $chat) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	my $chatno = $chats{$chat->url};
	$chatno ||= chatseq();
	$chat->{dormouse_id} = $chatno;
	sflap_do($toc, "CHAT_JOIN:$chatno:$name");
	$chats{$chatno} = $chat;
	$chats{$chat->url} = $chatno;
	print STDERR "Setting chat $chatno to ".$chat->url."\n";
}

sub oscar_evil($$$) {
	my $oscar = shift;
	my($newevil, $enemy) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	$enemy ||= "";
	sflap_do($toc, "EVILED:$newevil:$enemy");
}

sub buddy_info($$$$) {
	my $oscar = shift;
	my($screenname, $buddat) = @_;
	my $toc = $tocs{normalize($oscar->screenname)};

	my $string = "";
	if(!$buddat->{awaymsg}) {
		$string = "INFO:$screenname:";
		$string .= buddy_info_string($buddat);
		$buddat->{profile} ||= "";
		$string .= ":".$buddat->{profile};
	} else {
		$string = "AWAY:$screenname:".$buddat->{awaymsg};
	}

	sflap_do($toc, $string);
}
