# Note: This is Perl code.  Don't leave out quotes or a semicolon or anything
# like that.

# This should go in either /etc/imirc.conf or ~/.imirc

$confversion = 1.6;		#Make sure that the configuration is up-to-date

###
### Basic Configuration 
###
### The following configuration options MUST be changed!

#$localhelp = "#imirc";		#If you have a channel where people can ask
				#for help with IMIRC, uncomment this and set
				#it to that channel.

$us = "imserv.your.irc.net";	#IRC server name to claim to be
				#This should be the same as the servername
				#in the C/N lines you made in your IRC server's
				#ircd.conf.

$them = "127.0.0.1";		#Hostname/IP of IRC server to connect to
$themport = 6667;		#Port of IRC server to connect to

$ourpass = "foo";		#Password to send to the IRC server.
				#Note that this is also the key for
				# #imirc-debug.

$theirpass = "bar";		#Password to expect from the IRC server.

$servermode = "dal2";		#Should be either bahamut, dal2, dancer,
				#dragonfire, ircu, p0210, p10, ts, rfc,
				#ultimate, or unreal.  bahamut is very
				#similar to TS and is used by Bahamut IRCd.
				#dal2 is for the Dalnet protocol which is
				#used by a bunch of irc daemons, including
				#Cyclone.  dancer is for OpenProjects
				#Network's Dancer IRCd.  ircu is for the
				#Undernet IRC daemon.  ts uses the TimeStamp
				#protocol, which is used by IRC daemons
				#such as Hybrid.  ts4 is for TS4 servers,
				#such as PTLink.  p0210 is for irc.org ircd
				#2.10 and maybe 2.9.  p10 is the Undernet
				#P10 protocol - note that p10 support is
				#experimental.  rfc uses the IRC
				#protocol sepecifed in RFC 1459.  ultimate
				#is for Ultimate IRCD.  unreal is for
				#Unreal IRCd.
				#
				#Note that Dalnet's DreamForge should use ts
				#and not dal2.

$ignoreuhosts = 1;		#Ignore any nicks coming from servers with a U:
				#line.  This helps us play nice with services.

@ignorehosts = qw(services.*);	#Ignore any nicks coming from these servers.
				#These are interpreted as IRC-style globs.
				#Example with multiple servers:
				#  qw(services.* flervices.mynet.com)

#$dccip = "127.0.0.1";		#You must change this if you want savebuddies
				#and anything else which requires imirc to
				#do DCC SENDs to work.  Set this to the IP
				#of your machine that you want to use to send
				#DCCs over.  This should probably be your
				#internet IP address (i.e. not an internal
				#IP unless all your users are on the same LAN)

### 
### IRC/Interface preferences
### 

$prefix = "AIM-";	#Prefix attached to AOL Instant Messenger nicks.
			#If you set this to "", you'll have to set
			#require_qlines and kill_impersonaters to 0 below.
			#You should still add Q:lines for $usnick and $oldnick.

$usnick = "IMServ";	#IRC nickname which users use to communicate with imirc

$oldnick = "AIMServ";	#AIMServ is what we used to be called - take it so that
			#evil people can't, and if anyone tries to use it refer
			#them to the new name

$chatchan = "#aimchat-";	#Prefix attached to IRC channels used for
				#buddy chats

$nickchan = "#aimchan-";	#Prefix attached to IRC channels (optionally) used
				#for communication with users

$time = 60*5;		#Number of seconds after which an away message can be
			#sent twice to the same user.  60*5 is 5 minutes.

$user_loglevel = OSCAR_DBG_WARN;	#How much info to show the user
					#One of:
					#	OSCAR_DBG_NONE
					#	OSCAR_DBG_WARN
					#	OSCAR_DBG_INFO
					#	OSCAR_DBG_SIGNON
					#	OSCAR_DBG_NOTICE
					#	OSCAR_DBG_DEBUG
					#	OSCAR_DBG_PACKETS

$require_qlines = 1;	# Require Q: lines for $usnick, $oldnick, and $prefix*

$kill_impersonaters = 1; # KILL people who change nicks to something that starts with $prefix

###
### OSCAR preferences
###

$sendidle = 1;		#Send idle information to OSCAR by default.
			#Users can override this if they want.

$oscarserver = 'login.oscar.aol.com';	#OSCAR server to use
$oscarport = 5190;			#OSCAR port to use

### 
### Feature preferences
### 

$shortcircuit = 1;		#If an IM is being sent to someone who
				#is signed on to the local imirc, it
				#will go directly through IRC without
				#being sent to TOC.  This is transparent
				#to the user.

$dcc = 1;			#Enable/disable DCC.  This affects the
				#availability of certain commands.

###
### Debugging/administration settings
###

$fork = 1;	#Fork off into the background

$verbose = 0;	#Verbose start-up

$usepoll = 1;	#If IO::Poll is installed, use it if this is turned on.
		#If this is turned off or IO::Poll is not available, select
		# will be used.  poll tends to provide better performance
		# for the sort of usage that IMIRC gets (sparse FD sets)
		# on most systems.

$debug = 0;	#Turn debugging off.
		#A value of 1 will print debugging info to #imirc-debug
		#A value of 2 will print debugging info to STDERR
		#
		#Note that if this is set to 0, administrative commands will be
		#unavailable as #imirc-debug is required for the
		#administrative commands..

#$output = "$home/imirc.log";	# When used in conjunction with $debug = 2,
				# write to the specified logfile instead of STDERR.

#Debug levels.  You can set these to 1 for less verbosity, or 0 to
#turn them off entirely.

$debuglevel{buddies} = 99;
$debuglevel{chat} = 99;
$debuglevel{IM} = 99;
$debuglevel{config} = 99;
$debuglevel{signon} = 99;
$debuglevel{errors} = 99;
$debuglevel{irc} = 99;
$debuglevel{irc_connect} = 99;
$debuglevel{oscar} = 99;
$debuglevel{html} = 99;
$debuglevel{nicks} = 99;
$debuglevel{DCC} = 99;

1;
